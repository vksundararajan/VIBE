<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on VIBE</title><link>https://vksundararajan.github.io/VIBE/tags/security/</link><description>Recent content in Security on VIBE</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 24 Sep 2025 23:28:22 -0400</lastBuildDate><atom:link href="https://vksundararajan.github.io/VIBE/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://vksundararajan.github.io/VIBE/blog/kestrel/</link><pubDate>Wed, 24 Sep 2025 23:28:22 -0400</pubDate><guid>https://vksundararajan.github.io/VIBE/blog/kestrel/</guid><description>&lt;h2 id="kestrel-llm-powered-cybersecurity-research-assistant-using-rag">Kestrel: LLM-Powered Cybersecurity Research Assistant Using RAG&lt;/h2>
&lt;p>Agentic AI is changing the way we design intelligent systems. Instead of treating an LLM as a single-shot text generator, Agentic AI frameworks let us structure reasoning, retrieval, and decision-making in a way that mimics how humans research and solve problems.&lt;/p>
&lt;p>&lt;mark>Kestrel&lt;/mark> is a project where I applied this approach to a &lt;mark>cybersecurity domain&lt;/mark>. The goal was simple: create a research assistant that can query vulnerability datasets, reason over the results, and generate reliable, context-grounded answers. Under the hood, it combines LLMs, ChromaDB, LangChain, and JSON-based datasets into a Retrieval-Augmented Generation (RAG) pipeline that is configurable and extensible.&lt;/p></description></item><item><title>TryHackMe Writeup — Brains</title><link>https://vksundararajan.github.io/VIBE/blog/thm-brains/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://vksundararajan.github.io/VIBE/blog/thm-brains/</guid><description>&lt;p>Room Link: &lt;a href="https://tryhackme.com/room/brains">https://tryhackme.com/room/brains&lt;/a>&lt;/p>
&lt;h3 id="1-red-exploit-the-server">1. Red: Exploit the Server!&lt;/h3>
&lt;p>&lt;code>The city forgot to close its gate. Welcome to the Brains challenge, part of TryHackMe’s Hackathon! All brains gathered to build an engineering marvel; however, it seems strangers had found away to get in.&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://vksundararajan.github.io/VIBE/images/thm-brains/1.png" alt="Image">&lt;/p>
&lt;p>As the &lt;strong>Ping&lt;/strong> output shows, the TTL (Time to Live) value was 63. This is a strong indicator that the target machine was running a Linux distribution. With this information in hand, I proceeded to port scanning using &lt;strong>nmap&lt;/strong> to discover open services.&lt;/p></description></item><item><title>Beyond Bugs and Pipelines: Source Code Review Intelligence</title><link>https://vksundararajan.github.io/VIBE/blog/beyond-bugs-and-pipelines-source-code-review-intelligence/</link><pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate><guid>https://vksundararajan.github.io/VIBE/blog/beyond-bugs-and-pipelines-source-code-review-intelligence/</guid><description>&lt;p>In today’s software landscape, security is less about gates and more about gradients. It’s no longer enough to write secure code — we must think about how that code emerges, how it&amp;rsquo;s validated, and how it evolves.&lt;/p>
&lt;p>Over the past months, I’ve delved into both dimensions: the theory and execution of a Secure Software Development Life Cycle (S-SDLC), and the manual + automated art of Source Code Review. But the synergy between the two isn’t well documented.&lt;/p></description></item><item><title>TryHackMe Writeup — Billing</title><link>https://vksundararajan.github.io/VIBE/blog/thm-billing/</link><pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate><guid>https://vksundararajan.github.io/VIBE/blog/thm-billing/</guid><description>&lt;p>&lt;code>Some mistakes can be costly. Gain a shell, find the way and escalate your privileges! Bruteforcing is out of scope for this room.&lt;/code>&lt;/p>
&lt;p>Room Link: &lt;a href="https://tryhackme.com/room/billing">https://tryhackme.com/room/billing&lt;/a>&lt;/p>
&lt;h3 id="1-enumeration">1. Enumeration&lt;/h3>
&lt;p>&lt;img src="https://vksundararajan.github.io/VIBE/images/thm-billing/1.png" alt="Image">&lt;/p>
&lt;p>Identifying whether a target machine operates on &lt;strong>Linux&lt;/strong> can be facilitated by examining the TTL (Time to Live) value during a ping test. A TTL value of 63 typically indicates a Linux system, enabling a more tailored enumeration strategy that is.&lt;/p>
&lt;p>&lt;img src="https://vksundararajan.github.io/VIBE/images/thm-billing/2.png" alt="Image">&lt;/p></description></item></channel></rss>